<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:primitives="clr-namespace:Material.Controls.Primitives"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ripples="clr-namespace:Material.Controls.Ripples"
                    xmlns:behaviors="clr-namespace:Material.Controls.Behaviors">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="Material.Fonts.xaml"/>
		<ResourceDictionary Source="Material.Drawables.xaml"/>
		<ResourceDictionary Source="Material.Button.xaml"/>
		<ResourceDictionary Source="Material.Shadows.xaml"/>
	</ResourceDictionary.MergedDictionaries>
	
	<Style x:Key="PathButton" TargetType="{x:Type Button}">
		<Setter Property="Foreground">
			<Setter.Value>
				<Binding RelativeSource="{RelativeSource AncestorType={x:Type FrameworkElement}}" Path="(TextElement.Foreground)" />
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="ClipToBounds" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
							<ripples:RippleBinder.Tracker>
								<ripples:NewRippleTracker EventName="MouseDown" />
							</ripples:RippleBinder.Tracker>
							<Canvas>
								<Canvas.RenderTransform>
									<TranslateTransform >
										<ripples:RippleFinal.Placement>
											<MultiBinding Converter="{ripples:DynamicRipplePlacementConverter}">
												<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
												<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
												<Binding Path="ActualHeight" ElementName="PART_Ripple"/>
												<Binding Path="(ripples:RippleFinal.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
											</MultiBinding>
										</ripples:RippleFinal.Placement>
									</TranslateTransform>
								</Canvas.RenderTransform>
								<Ellipse x:Name="PART_Ripple" 
																	RenderTransformOrigin=".5,.5" 
																	VerticalAlignment="Center"
																	HorizontalAlignment="Center"
																	IsHitTestVisible="False">
									<Ellipse.RenderTransform>
										<ScaleTransform ScaleX="0" ScaleY="0"/>
									</Ellipse.RenderTransform>
									<Ellipse.Fill>
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(primitives:VisualFeedback.Brush)"/>
									</Ellipse.Fill>
									<Ellipse.Height>
										<MultiBinding Converter="{ripples:DynamicRippleDiameterConverter}" ConverterParameter="2">
											<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="(ripples:RippleFinal.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
										</MultiBinding>
									</Ellipse.Height>
									<Ellipse.Width>
										<Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight" />
									</Ellipse.Width>
								</Ellipse>
							</Canvas>
							<Viewbox RenderTransformOrigin=".5,.5">
								<Viewbox.RenderTransform>
									<TransformGroup>
										<ScaleTransform>
											<ScaleTransform.ScaleY>
												<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(behaviors:IconAssist.Scale)"/>
											</ScaleTransform.ScaleY>
											<ScaleTransform.ScaleX>
												<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(behaviors:IconAssist.Scale)"/>
											</ScaleTransform.ScaleX>
										</ScaleTransform>
										<RotateTransform>
											<RotateTransform.Angle>
												<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(behaviors:IconAssist.Rotation)"/>
											</RotateTransform.Angle>
										</RotateTransform>
									</TransformGroup>

								</Viewbox.RenderTransform>

								<ContentPresenter x:Name="PART_ContentPresenter"
																										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																										VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
																										Margin="{TemplateBinding Padding}"
																										RenderTransformOrigin=".5,.5">
									<ContentPresenter.RenderTransform>
										<ScaleTransform ScaleX="1" ScaleY="1"/>
									</ContentPresenter.RenderTransform>
								</ContentPresenter>
							</Viewbox>

						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
																											To="1.15" Duration="0:0:.15" />

										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
																											To="1.15" Duration="0:0:.15" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
																											To="1" Duration="0:0:.15" />

										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
																											To="1" Duration="0:0:.15" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="Opacity" 
																											To="1" Duration="0:0:.15" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
																											Storyboard.TargetProperty="Opacity" 
																											To=".4" Duration="0:0:.15" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="IsHitTestVisible" Value="False"/>
							<Setter TargetName="PART_ContentPresenter"  Property="Opacity" Value=".4"/>
						</Trigger>
						<EventTrigger RoutedEvent="Click">
							<BeginStoryboard>
								<Storyboard SpeedRatio="2">
									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																										Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
																										From="0" To=".6"
																										Duration="0:0:0.75" 
																										EasingFunction="{Ease Out, Quad}"/>

									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																										Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
																										From="0" To=".6"
																										Duration="0:0:0.75" 
																										EasingFunction="{Ease Out, Quad}"/>

									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" 
																																								Storyboard.TargetProperty="Opacity">
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.00"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.10"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.60"/>
										<SplineDoubleKeyFrame Value="0" KeyTime="0:0:0.75"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PathButtonDarkSurface" TargetType="{x:Type Button}" BasedOn="{StaticResource PathButton}">
		<Setter Property="primitives:VisualFeedback.Brush" Value="{StaticResource DarkSurfaceVisualFeedbackBrush}"/>
	</Style>

	<Style x:Key="PathButtonLightSurface" TargetType="{x:Type Button}" BasedOn="{StaticResource PathButton}">
		<Setter Property="primitives:VisualFeedback.Brush" Value="{StaticResource LightSurfaceVisualFeedbackBrush}"/>
	</Style>


	<Style x:Key="PathButtonDarkSurface_CollapseIfDisabled" TargetType="{x:Type Button}" BasedOn="{StaticResource PathButtonDarkSurface}">
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Visibility" Value="Collapsed"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="PathButtonLightSurface_CollapseIfDisabled" TargetType="{x:Type Button}" BasedOn="{StaticResource PathButtonLightSurface}">
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Visibility" Value="Collapsed"/>
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>